
MotionSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae4  08003ae4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aec  08003aec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003b00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003b00  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2af  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a14  00000000  00000000  0002e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028949  00000000  00000000  00030ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c47d  00000000  00000000  00059941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb214  00000000  00000000  00065dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  00161028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003a5c 	.word	0x08003a5c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003a5c 	.word	0x08003a5c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc16 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f831 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8c1 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f873 	bl	80005f0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // keep track of previous signal, if the previous signal is 0 and the current value is 1, send out a signal
  int previous_signal = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int output = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 ff1a 	bl	800134c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	60bb      	str	r3, [r7, #8]

	  if(output == 1 && previous_signal == 0) {
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d114      	bne.n	800054c <main+0x58>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d111      	bne.n	800054c <main+0x58>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <main+0x68>)
 800052e:	f000 ff25 	bl	800137c <HAL_GPIO_WritePin>
		  //send UART signal
		  // pd5
		  uint8_t buf[1] = "3";
 8000532:	2333      	movs	r3, #51	; 0x33
 8000534:	713b      	strb	r3, [r7, #4]
		  HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 8000536:	1d39      	adds	r1, r7, #4
 8000538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053c:	2201      	movs	r2, #1
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x6c>)
 8000540:	f002 fc48 	bl	8002dd4 <HAL_UART_Transmit>

		  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 fc65 	bl	8000e14 <HAL_Delay>
	  if(output == 1 && previous_signal == 0) {
 800054a:	e004      	b.n	8000556 <main+0x62>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <main+0x68>)
 8000552:	f000 ff13 	bl	800137c <HAL_GPIO_WritePin>
	  }
	  previous_signal = output;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	60fb      	str	r3, [r7, #12]
  {
 800055a:	e7d8      	b.n	800050e <main+0x1a>
 800055c:	48000400 	.word	0x48000400
 8000560:	20000028 	.word	0x20000028

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b096      	sub	sp, #88	; 0x58
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2244      	movs	r2, #68	; 0x44
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fa6a 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000586:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058a:	f000 ff2f 	bl	80013ec <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000594:	f000 fadc 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000598:	2310      	movs	r3, #16
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a4:	2360      	movs	r3, #96	; 0x60
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 ffcf 	bl	8001554 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005bc:	f000 fac8 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fbe1 	bl	8001da0 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e4:	f000 fab4 	bl	8000b50 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_USART2_UART_Init+0x90>)
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <MX_USART2_UART_Init+0x94>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_USART2_UART_Init+0x90>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART2_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800063a:	f002 fb7b 	bl	8002d34 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000644:	f000 fa84 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800064c:	f003 f910 	bl	8003870 <HAL_UARTEx_SetTxFifoThreshold>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000656:	f000 fa7b 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065a:	2100      	movs	r1, #0
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800065e:	f003 f945 	bl	80038ec <HAL_UARTEx_SetRxFifoThreshold>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000668:	f000 fa72 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_USART2_UART_Init+0x90>)
 800066e:	f003 f8c6 	bl	80037fe <HAL_UARTEx_DisableFifoMode>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000678:	f000 fa6a 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	; 0x38
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4bb3      	ldr	r3, [pc, #716]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4ab2      	ldr	r2, [pc, #712]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4bb0      	ldr	r3, [pc, #704]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0310 	and.w	r3, r3, #16
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4bad      	ldr	r3, [pc, #692]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4aac      	ldr	r2, [pc, #688]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4baa      	ldr	r3, [pc, #680]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ce:	4ba7      	ldr	r3, [pc, #668]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4aa6      	ldr	r2, [pc, #664]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4ba4      	ldr	r3, [pc, #656]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4ba1      	ldr	r3, [pc, #644]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4aa0      	ldr	r2, [pc, #640]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b9e      	ldr	r3, [pc, #632]	; (800096c <MX_GPIO_Init+0x2e4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b9b      	ldr	r3, [pc, #620]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a9a      	ldr	r2, [pc, #616]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b98      	ldr	r3, [pc, #608]	; (800096c <MX_GPIO_Init+0x2e4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b95      	ldr	r3, [pc, #596]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a94      	ldr	r2, [pc, #592]	; (800096c <MX_GPIO_Init+0x2e4>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b92      	ldr	r3, [pc, #584]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b8f      	ldr	r3, [pc, #572]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a8e      	ldr	r2, [pc, #568]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b8c      	ldr	r3, [pc, #560]	; (800096c <MX_GPIO_Init+0x2e4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	4b89      	ldr	r3, [pc, #548]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <MX_GPIO_Init+0x2e4>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b86      	ldr	r3, [pc, #536]	; (800096c <MX_GPIO_Init+0x2e4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800075e:	f000 fee9 	bl	8001534 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	4882      	ldr	r0, [pc, #520]	; (8000970 <MX_GPIO_Init+0x2e8>)
 8000768:	f000 fe08 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076c:	230c      	movs	r3, #12
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800077c:	230d      	movs	r3, #13
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	487b      	ldr	r0, [pc, #492]	; (8000974 <MX_GPIO_Init+0x2ec>)
 8000788:	f000 fc4e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800078c:	2307      	movs	r3, #7
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800079c:	2304      	movs	r3, #4
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4874      	ldr	r0, [pc, #464]	; (8000978 <MX_GPIO_Init+0x2f0>)
 80007a8:	f000 fc3e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007bc:	230d      	movs	r3, #13
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	486c      	ldr	r0, [pc, #432]	; (8000978 <MX_GPIO_Init+0x2f0>)
 80007c8:	f000 fc2e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007cc:	233f      	movs	r3, #63	; 0x3f
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4867      	ldr	r0, [pc, #412]	; (800097c <MX_GPIO_Init+0x2f4>)
 80007e0:	f000 fc22 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e4:	2301      	movs	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007f4:	2301      	movs	r3, #1
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 fc11 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000806:	230a      	movs	r3, #10
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800080a:	230b      	movs	r3, #11
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f000 fc04 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000820:	2370      	movs	r3, #112	; 0x70
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000830:	2305      	movs	r3, #5
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 fbf3 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f000 fbe6 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800086c:	2302      	movs	r3, #2
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <MX_GPIO_Init+0x2e8>)
 8000878:	f000 fbd6 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087c:	2302      	movs	r3, #2
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000880:	230b      	movs	r3, #11
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4838      	ldr	r0, [pc, #224]	; (8000970 <MX_GPIO_Init+0x2e8>)
 8000890:	f000 fbca 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000894:	2344      	movs	r3, #68	; 0x44
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4832      	ldr	r0, [pc, #200]	; (8000970 <MX_GPIO_Init+0x2e8>)
 80008a8:	f000 fbbe 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ac:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008be:	2301      	movs	r3, #1
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	482a      	ldr	r0, [pc, #168]	; (8000974 <MX_GPIO_Init+0x2ec>)
 80008ca:	f000 fbad 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80008e0:	2303      	movs	r3, #3
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4822      	ldr	r0, [pc, #136]	; (8000974 <MX_GPIO_Init+0x2ec>)
 80008ec:	f000 fb9c 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000902:	2301      	movs	r3, #1
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_GPIO_Init+0x2e8>)
 800090e:	f000 fb8b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000912:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000924:	230d      	movs	r3, #13
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4810      	ldr	r0, [pc, #64]	; (8000970 <MX_GPIO_Init+0x2e8>)
 8000930:	f000 fb7a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000946:	230e      	movs	r3, #14
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_GPIO_Init+0x2e8>)
 8000952:	f000 fb69 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
 8000968:	e00a      	b.n	8000980 <MX_GPIO_Init+0x2f8>
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400
 8000974:	48001000 	.word	0x48001000
 8000978:	48001400 	.word	0x48001400
 800097c:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000980:	2307      	movs	r3, #7
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	486c      	ldr	r0, [pc, #432]	; (8000b3c <MX_GPIO_Init+0x4b4>)
 800098c:	f000 fb4c 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000990:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009a2:	2302      	movs	r3, #2
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4863      	ldr	r0, [pc, #396]	; (8000b3c <MX_GPIO_Init+0x4b4>)
 80009ae:	f000 fb3b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009c4:	2308      	movs	r3, #8
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	485c      	ldr	r0, [pc, #368]	; (8000b40 <MX_GPIO_Init+0x4b8>)
 80009d0:	f000 fb2a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009e4:	230d      	movs	r3, #13
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4855      	ldr	r0, [pc, #340]	; (8000b44 <MX_GPIO_Init+0x4bc>)
 80009f0:	f000 fb1a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a04:	2302      	movs	r3, #2
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	484d      	ldr	r0, [pc, #308]	; (8000b44 <MX_GPIO_Init+0x4bc>)
 8000a10:	f000 fb0a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a26:	230c      	movs	r3, #12
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4844      	ldr	r0, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x4bc>)
 8000a32:	f000 faf9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 faeb 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a64:	230a      	movs	r3, #10
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f000 fad9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a86:	2309      	movs	r3, #9
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	482a      	ldr	r0, [pc, #168]	; (8000b3c <MX_GPIO_Init+0x4b4>)
 8000a92:	f000 fac9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a96:	2304      	movs	r3, #4
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4822      	ldr	r0, [pc, #136]	; (8000b3c <MX_GPIO_Init+0x4b4>)
 8000ab2:	f000 fab9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ab6:	2338      	movs	r3, #56	; 0x38
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481d      	ldr	r0, [pc, #116]	; (8000b48 <MX_GPIO_Init+0x4c0>)
 8000ad2:	f000 faa9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4816      	ldr	r0, [pc, #88]	; (8000b48 <MX_GPIO_Init+0x4c0>)
 8000aee:	f000 fa9b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_GPIO_Init+0x4c0>)
 8000b10:	f000 fa8a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b14:	2301      	movs	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b24:	2302      	movs	r3, #2
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_GPIO_Init+0x4c4>)
 8000b30:	f000 fa7a 	bl	8001028 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	48000c00 	.word	0x48000c00
 8000b40:	48001800 	.word	0x48001800
 8000b44:	48000800 	.word	0x48000800
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48001000 	.word	0x48001000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ae      	sub	sp, #184	; 0xb8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2294      	movs	r2, #148	; 0x94
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 ff41 	bl	8003a4c <memset>
  if(huart->Instance==USART2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_UART_MspInit+0xb0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d13a      	bne.n	8000c4a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fb8f 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f7ff ffb0 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf4:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c20:	2378      	movs	r3, #120	; 0x78
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000c46:	f000 f9ef 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	37b8      	adds	r7, #184	; 0xb8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000c00 	.word	0x48000c00

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f892 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f002 fe7d 	bl	8003a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fbf3 	bl	80004f4 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	08003af4 	.word	0x08003af4
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d24:	200000bc 	.word	0x200000bc

08000d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f943 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff ff06 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_InitTick+0x70>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f941 	bl	800100e <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d809      	bhi.n	8000dac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f000 f919 	bl	8000fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0x74>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e004      	b.n	8000dbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e001      	b.n	8000dbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200000b8 	.word	0x200000b8

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000b8 	.word	0x200000b8

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e166      	b.n	8001306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8158 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80b2 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a60      	ldr	r2, [pc, #384]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011de:	d02b      	beq.n	8001238 <HAL_GPIO_Init+0x210>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_GPIO_Init+0x304>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d025      	beq.n	8001234 <HAL_GPIO_Init+0x20c>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d01f      	beq.n	8001230 <HAL_GPIO_Init+0x208>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d019      	beq.n	800122c <HAL_GPIO_Init+0x204>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x200>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x314>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1fc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x318>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1f8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x31c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1f4>
 8001218:	2307      	movs	r3, #7
 800121a:	e00e      	b.n	800123a <HAL_GPIO_Init+0x212>
 800121c:	2308      	movs	r3, #8
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001220:	2306      	movs	r3, #6
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x212>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x300>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x320>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x320>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_GPIO_Init+0x320>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae91 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	48001c00 	.word	0x48001c00
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013bc:	d102      	bne.n	80013c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	e00b      	b.n	80013dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d2:	d102      	bne.n	80013da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	e000      	b.n	80013dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80013da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d141      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d131      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140e:	4a46      	ldr	r2, [pc, #280]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001420:	4a41      	ldr	r2, [pc, #260]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143e:	e002      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d102      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d158      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e057      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800147c:	e04d      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001484:	d141      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001492:	d131      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2232      	movs	r2, #50	; 0x32
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ca:	e002      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d102      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f2      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d112      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e011      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001508:	e007      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001518:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40007000 	.word	0x40007000
 800152c:	20000000 	.word	0x20000000
 8001530:	431bde83 	.word	0x431bde83

08001534 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_PWREx_EnableVddIO2+0x1c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_PWREx_EnableVddIO2+0x1c>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001542:	6053      	str	r3, [r2, #4]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	f000 bc16 	b.w	8001d94 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001568:	4ba0      	ldr	r3, [pc, #640]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001572:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80e4 	beq.w	8001752 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4c>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	f040 808b 	bne.w	80016ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b01      	cmp	r3, #1
 800159c:	f040 8087 	bne.w	80016ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x64>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e3ed      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4b8b      	ldr	r3, [pc, #556]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_RCC_OscConfig+0x7e>
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d0:	e005      	b.n	80015de <HAL_RCC_OscConfig+0x8a>
 80015d2:	4b86      	ldr	r3, [pc, #536]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015de:	4293      	cmp	r3, r2
 80015e0:	d223      	bcs.n	800162a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fdca 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e3ce      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f6:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4977      	ldr	r1, [pc, #476]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001614:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	4972      	ldr	r1, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e025      	b.n	8001676 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6f      	ldr	r2, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	496a      	ldr	r1, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001648:	4b68      	ldr	r3, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	4965      	ldr	r1, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fd8a 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e38e      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001676:	f000 fcbf 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800167a:	4602      	mov	r2, r0
 800167c:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	495a      	ldr	r1, [pc, #360]	; (80017f0 <HAL_RCC_OscConfig+0x29c>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_OscConfig+0x2a0>)
 8001694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <HAL_RCC_OscConfig+0x2a4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fb5e 	bl	8000d5c <HAL_InitTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d052      	beq.n	8001750 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	e372      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d032      	beq.n	800171c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb9b 	bl	8000dfc <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ca:	f7ff fb97 	bl	8000dfc <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e35b      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e8:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	493a      	ldr	r1, [pc, #232]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
 800171a:	e01a      	b.n	8001752 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb68 	bl	8000dfc <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001730:	f7ff fb64 	bl	8000dfc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e328      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1dc>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d073      	beq.n	8001846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x21c>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d10e      	bne.n	8001788 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d10b      	bne.n	8001788 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d063      	beq.n	8001844 <HAL_RCC_OscConfig+0x2f0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d15f      	bne.n	8001844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e305      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x24c>
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0x288>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x270>
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x288>
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_RCC_OscConfig+0x298>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01b      	beq.n	800181c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb0a 	bl	8000dfc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	e010      	b.n	800180e <HAL_RCC_OscConfig+0x2ba>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08003a74 	.word	0x08003a74
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fafe 	bl	8000dfc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2c2      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	4baf      	ldr	r3, [pc, #700]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x2a8>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff faee 	bl	8000dfc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff faea 	bl	8000dfc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e2ae      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	4ba5      	ldr	r3, [pc, #660]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x2d0>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d060      	beq.n	8001914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x310>
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d119      	bne.n	8001892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d116      	bne.n	8001892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	4b99      	ldr	r3, [pc, #612]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x328>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e28b      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b93      	ldr	r3, [pc, #588]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	4990      	ldr	r1, [pc, #576]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	e040      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d023      	beq.n	80018e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189a:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a8b      	ldr	r2, [pc, #556]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff faa9 	bl	8000dfc <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff faa5 	bl	8000dfc <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e269      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	4b82      	ldr	r3, [pc, #520]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	497c      	ldr	r1, [pc, #496]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e018      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a79      	ldr	r2, [pc, #484]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80018e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fa85 	bl	8000dfc <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa81 	bl	8000dfc <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e245      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001908:	4b70      	ldr	r3, [pc, #448]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa60 	bl	8000dfc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fa5c 	bl	8000dfc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e220      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001952:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x3ec>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa43 	bl	8000dfc <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fa3f 	bl	8000dfc <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e203      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10d      	bne.n	80019d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	4b44      	ldr	r3, [pc, #272]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a43      	ldr	r2, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_RCC_OscConfig+0x57c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d118      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x57c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_RCC_OscConfig+0x57c>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa06 	bl	8000dfc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f4:	f7ff fa02 	bl	8000dfc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1c6      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_RCC_OscConfig+0x57c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4d8>
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2a:	e024      	b.n	8001a76 <HAL_RCC_OscConfig+0x522>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d110      	bne.n	8001a56 <HAL_RCC_OscConfig+0x502>
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a54:	e00f      	b.n	8001a76 <HAL_RCC_OscConfig+0x522>
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a6e:	f023 0304 	bic.w	r3, r3, #4
 8001a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f9bd 	bl	8000dfc <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f9b9 	bl	8000dfc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e17b      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x578>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ed      	beq.n	8001a86 <HAL_RCC_OscConfig+0x532>
 8001aaa:	e01a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff f9a6 	bl	8000dfc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab2:	e00f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f9a2 	bl	8000dfc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d906      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e164      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	4ba8      	ldr	r3, [pc, #672]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e8      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4ba3      	ldr	r3, [pc, #652]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4aa2      	ldr	r2, [pc, #648]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b08:	4b9b      	ldr	r3, [pc, #620]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0e:	4a9a      	ldr	r2, [pc, #616]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f970 	bl	8000dfc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b20:	f7ff f96c 	bl	8000dfc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e130      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b32:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ef      	beq.n	8001b20 <HAL_RCC_OscConfig+0x5cc>
 8001b40:	e01b      	b.n	8001b7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b42:	4b8d      	ldr	r3, [pc, #564]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b48:	4a8b      	ldr	r2, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f953 	bl	8000dfc <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5a:	f7ff f94f 	bl	8000dfc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e113      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b6c:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ef      	bne.n	8001b5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8107 	beq.w	8001d92 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 80cb 	bne.w	8001d24 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0203 	and.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d12c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	3b01      	subs	r3, #1
 8001bae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d123      	bne.n	8001bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d11b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d113      	bne.n	8001bfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d109      	bne.n	8001bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d06d      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d068      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0ba      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c2a:	f7ff f8e7 	bl	8000dfc <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff f8e3 	bl	8000dfc <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0a7      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x828>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c60:	3a01      	subs	r2, #1
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6a:	0212      	lsls	r2, r2, #8
 8001c6c:	4311      	orrs	r1, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c72:	0852      	lsrs	r2, r2, #1
 8001c74:	3a01      	subs	r2, #1
 8001c76:	0552      	lsls	r2, r2, #21
 8001c78:	4311      	orrs	r1, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c7e:	0852      	lsrs	r2, r2, #1
 8001c80:	3a01      	subs	r2, #1
 8001c82:	0652      	lsls	r2, r2, #25
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c8a:	06d2      	lsls	r2, r2, #27
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cac:	f7ff f8a6 	bl	8000dfc <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f8a2 	bl	8000dfc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e066      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd2:	e05e      	b.n	8001d92 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e05d      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d156      	bne.n	8001d92 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cfc:	f7ff f87e 	bl	8000dfc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f87a 	bl	8000dfc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e03e      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x7b0>
 8001d22:	e036      	b.n	8001d92 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d031      	beq.n	8001d8e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d48:	f023 0303 	bic.w	r3, r3, #3
 8001d4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x824>)
 8001d54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f84d 	bl	8000dfc <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	e00c      	b.n	8001d80 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff f849 	bl	8000dfc <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d905      	bls.n	8001d80 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e00d      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x848>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ec      	bne.n	8001d66 <HAL_RCC_OscConfig+0x812>
 8001d8c:	e001      	b.n	8001d92 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e10f      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 020f 	bic.w	r2, r3, #15
 8001dce:	4984      	ldr	r1, [pc, #528]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0f7      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8089 	beq.w	8001f08 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d133      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e4      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e0e:	f000 fa11 	bl	8002234 <RCC_GetSysClockFreqFromPLLSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a74      	ldr	r2, [pc, #464]	; (8001fe8 <HAL_RCC_ClockConfig+0x248>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d955      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2e:	4a6d      	ldr	r2, [pc, #436]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e044      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03e      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d13a      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e58:	4a62      	ldr	r2, [pc, #392]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e02f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0ac      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0a0      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e098      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ea6:	f000 f8a7 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_RCC_ClockConfig+0x248>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d909      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eba:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4944      	ldr	r1, [pc, #272]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe ff90 	bl	8000dfc <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe ff8c 	bl	8000dfc <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e070      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4930      	ldr	r1, [pc, #192]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b80      	cmp	r3, #128	; 0x80
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f38:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d210      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 020f 	bic.w	r2, r3, #15
 8001f50:	4923      	ldr	r1, [pc, #140]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_ClockConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e036      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4918      	ldr	r1, [pc, #96]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa8:	f000 f826 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <HAL_RCC_ClockConfig+0x24c>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x250>)
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x254>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fec5 	bl	8000d5c <HAL_InitTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	04c4b400 	.word	0x04c4b400
 8001fec:	08003a74 	.word	0x08003a74
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d121      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11e      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d134      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xa6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xac>
 800209c:	e005      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb02 f203 	mul.w	r2, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	3301      	adds	r3, #1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f0:	69bb      	ldr	r3, [r7, #24]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	08003a8c 	.word	0x08003a8c
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003a84 	.word	0x08003a84

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002158:	f7ff ffda 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK2Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08003a84 	.word	0x08003a84

08002180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002198:	f7ff f908 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 800219c:	6178      	str	r0, [r7, #20]
 800219e:	e014      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6593      	str	r3, [r2, #88]	; 0x58
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f8f8 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a1a      	ldr	r2, [pc, #104]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d0:	d10b      	bne.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d913      	bls.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2ba0      	cmp	r3, #160	; 0xa0
 80021dc:	d902      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021de:	2302      	movs	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e00d      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e4:	2301      	movs	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e00a      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b7f      	cmp	r3, #127	; 0x7f
 80021ee:	d902      	bls.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80021f0:	2302      	movs	r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e004      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d101      	bne.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 020f 	bic.w	r2, r3, #15
 8002208:	4909      	ldr	r1, [pc, #36]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	40022000 	.word	0x40022000

08002234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d118      	bne.n	800227c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e005      	b.n	8002272 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d003      	beq.n	8002294 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d003      	beq.n	800229a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002292:	e005      	b.n	80022a0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002296:	613b      	str	r3, [r7, #16]
    break;
 8002298:	e005      	b.n	80022a6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800229c:	613b      	str	r3, [r7, #16]
    break;
 800229e:	e002      	b.n	80022a6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
    break;
 80022a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	3301      	adds	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	fb02 f203 	mul.w	r2, r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0e5b      	lsrs	r3, r3, #25
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80022e6:	683b      	ldr	r3, [r7, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003a8c 	.word	0x08003a8c
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800230c:	2300      	movs	r3, #0
 800230e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002310:	2300      	movs	r3, #0
 8002312:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d040      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d02a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d825      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d026      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d821      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d006      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d81d      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002340:	2b20      	cmp	r3, #32
 8002342:	d010      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002344:	e018      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a88      	ldr	r2, [pc, #544]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002352:	e015      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fb02 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002364:	e00c      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fbed 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002376:	e003      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	74fb      	strb	r3, [r7, #19]
      break;
 800237c:	e000      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800237e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002386:	4b79      	ldr	r3, [pc, #484]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800238c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002394:	4975      	ldr	r1, [pc, #468]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800239c:	e001      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d047      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d030      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023bc:	d82a      	bhi.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80023be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023c2:	d02a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80023c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023c8:	d824      	bhi.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80023ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d81e      	bhi.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80023da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023de:	d010      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023e0:	e018      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023e2:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a61      	ldr	r2, [pc, #388]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ee:	e015      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fab4 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002400:	e00c      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3320      	adds	r3, #32
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fb9f 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002412:	e003      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	74fb      	strb	r3, [r7, #19]
      break;
 8002418:	e000      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800241a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002422:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	494e      	ldr	r1, [pc, #312]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002438:	e001      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 809f 	beq.w	800258a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a40      	ldr	r2, [pc, #256]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3a      	ldr	r2, [pc, #232]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800248e:	f7fe fcb5 	bl	8000dfc <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002494:	e009      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fcb1 	bl	8000dfc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d902      	bls.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	74fb      	strb	r3, [r7, #19]
        break;
 80024a8:	e005      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ef      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d15b      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01f      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d019      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d016      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fc70 	bl	8000dfc <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251e:	e00b      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe fc6c 	bl	8000dfc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d902      	bls.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	74fb      	strb	r3, [r7, #19]
            break;
 8002536:	e006      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ec      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10c      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002564:	e008      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
 800256a:	e005      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002578:	7c7b      	ldrb	r3, [r7, #17]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4ba0      	ldr	r3, [pc, #640]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4a9f      	ldr	r2, [pc, #636]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002596:	4b9a      	ldr	r3, [pc, #616]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 0203 	bic.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	4996      	ldr	r1, [pc, #600]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025b8:	4b91      	ldr	r3, [pc, #580]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 020c 	bic.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	498e      	ldr	r1, [pc, #568]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	4985      	ldr	r1, [pc, #532]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	497d      	ldr	r1, [pc, #500]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800261e:	4b78      	ldr	r3, [pc, #480]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	4974      	ldr	r1, [pc, #464]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	496c      	ldr	r1, [pc, #432]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002670:	4963      	ldr	r1, [pc, #396]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002684:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002692:	495b      	ldr	r1, [pc, #364]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a6:	4b56      	ldr	r3, [pc, #344]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	4952      	ldr	r1, [pc, #328]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026c8:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	494a      	ldr	r1, [pc, #296]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ea:	4b45      	ldr	r3, [pc, #276]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	4941      	ldr	r1, [pc, #260]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800270c:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	4939      	ldr	r1, [pc, #228]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d028      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272e:	4b34      	ldr	r3, [pc, #208]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	4930      	ldr	r1, [pc, #192]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274c:	d106      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002758:	60d3      	str	r3, [r2, #12]
 800275a:	e011      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f8f9 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d04d      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002794:	d108      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027a6:	e012      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c6:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e2:	60d3      	str	r3, [r2, #12]
 80027e4:	e020      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ee:	d109      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a02      	ldr	r2, [pc, #8]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	60d3      	str	r3, [r2, #12]
 80027fc:	e014      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f8a5 	bl	8002964 <RCCEx_PLLSAI1_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d028      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002842:	4947      	ldr	r1, [pc, #284]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002852:	d106      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a41      	ldr	r2, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285e:	60d3      	str	r3, [r2, #12]
 8002860:	e011      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286a:	d10c      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f876 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01e      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a2:	492f      	ldr	r1, [pc, #188]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f851 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e2:	f023 0204 	bic.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ec:	491c      	ldr	r1, [pc, #112]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002906:	f023 0218 	bic.w	r2, r3, #24
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	4913      	ldr	r1, [pc, #76]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d017      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800292a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	490a      	ldr	r1, [pc, #40]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002946:	d105      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002952:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002954:	7cbb      	ldrb	r3, [r7, #18]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002972:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00e      	beq.n	800299c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800297e:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d103      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
       ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d142      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e03f      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d018      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x72>
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d825      	bhi.n	80029f4 <RCCEx_PLLSAI1_Config+0x90>
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d002      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x4e>
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d009      	beq.n	80029c4 <RCCEx_PLLSAI1_Config+0x60>
 80029b0:	e020      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b2:	4b62      	ldr	r3, [pc, #392]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c2:	e01a      	b.n	80029fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c4:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e013      	b.n	80029fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d6:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e2:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029f2:	e006      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e004      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029fa:	bf00      	nop
 80029fc:	e002      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4949      	ldr	r1, [pc, #292]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 8086 	bne.w	8002b30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a24:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a44      	ldr	r2, [pc, #272]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe f9e4 	bl	8000dfc <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a36:	e009      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a38:	f7fe f9e0 	bl	8000dfc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4a:	e005      	b.n	8002a58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ef      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d168      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d113      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	0211      	lsls	r1, r2, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	06d2      	lsls	r2, r2, #27
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	3a01      	subs	r2, #1
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	430a      	orrs	r2, r1
 8002a84:	492d      	ldr	r1, [pc, #180]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]
 8002a8a:	e02d      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d115      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6892      	ldr	r2, [r2, #8]
 8002a9e:	0211      	lsls	r1, r2, #8
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6912      	ldr	r2, [r2, #16]
 8002aa4:	0852      	lsrs	r2, r2, #1
 8002aa6:	3a01      	subs	r2, #1
 8002aa8:	0552      	lsls	r2, r2, #21
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6852      	ldr	r2, [r2, #4]
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4921      	ldr	r1, [pc, #132]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	610b      	str	r3, [r1, #16]
 8002abc:	e014      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	0211      	lsls	r1, r2, #8
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6952      	ldr	r2, [r2, #20]
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0652      	lsls	r2, r2, #25
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6852      	ldr	r2, [r2, #4]
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4916      	ldr	r1, [pc, #88]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe f982 	bl	8000dfc <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002afa:	e009      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002afc:	f7fe f97e 	bl	8000dfc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b0e:	e005      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	4904      	ldr	r1, [pc, #16]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	07ff800f 	.word	0x07ff800f
 8002b44:	ff9f800f 	.word	0xff9f800f
 8002b48:	f9ff800f 	.word	0xf9ff800f

08002b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d103      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d142      	bne.n	8002c04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e03f      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d018      	beq.n	8002bbe <RCCEx_PLLSAI2_Config+0x72>
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d825      	bhi.n	8002bdc <RCCEx_PLLSAI2_Config+0x90>
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0x4e>
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d009      	beq.n	8002bac <RCCEx_PLLSAI2_Config+0x60>
 8002b98:	e020      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e01a      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bac:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e013      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bbe:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bda:	e006      	b.n	8002bea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e004      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002be2:	bf00      	nop
 8002be4:	e002      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4949      	ldr	r1, [pc, #292]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8086 	bne.w	8002d18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe f8f0 	bl	8000dfc <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c20:	f7fe f8ec 	bl	8000dfc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
        break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ef      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d168      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d113      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	06d2      	lsls	r2, r2, #27
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	3a01      	subs	r2, #1
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	492d      	ldr	r1, [pc, #180]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	614b      	str	r3, [r1, #20]
 8002c72:	e02d      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d115      	bne.n	8002ca6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	0211      	lsls	r1, r2, #8
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6912      	ldr	r2, [r2, #16]
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6852      	ldr	r2, [r2, #4]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4921      	ldr	r1, [pc, #132]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
 8002ca4:	e014      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	0211      	lsls	r1, r2, #8
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6952      	ldr	r2, [r2, #20]
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0652      	lsls	r2, r2, #25
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6852      	ldr	r2, [r2, #4]
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4916      	ldr	r1, [pc, #88]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f88e 	bl	8000dfc <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce4:	f7fe f88a 	bl	8000dfc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	4904      	ldr	r1, [pc, #16]	; (8002d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	07ff800f 	.word	0x07ff800f
 8002d2c:	ff9f800f 	.word	0xff9f800f
 8002d30:	f9ff800f 	.word	0xf9ff800f

08002d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e042      	b.n	8002dcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fd ff23 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2224      	movs	r2, #36	; 0x24
 8002d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8c4 	bl	8002f04 <UART_SetConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e022      	b.n	8002dcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fb80 	bl	8003494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fc07 	bl	80035d8 <UART_CheckIdleState>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 8084 	bne.w	8002ef8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Transmit+0x28>
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e07c      	b.n	8002efa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Transmit+0x3a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e075      	b.n	8002efa <HAL_UART_Transmit+0x126>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e26:	f7fd ffe9 	bl	8000dfc <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Transmit+0x84>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002e68:	e02d      	b.n	8002ec6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fbfa 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03a      	b.n	8002efa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e96:	b292      	uxth	r2, r2
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e008      	b.n	8002eb4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1cb      	bne.n	8002e6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2140      	movs	r1, #64	; 0x40
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fbc6 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e006      	b.n	8002efa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4bb1      	ldr	r3, [pc, #708]	; (80031f4 <UART_SetConfig+0x2f0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4aa6      	ldr	r2, [pc, #664]	; (80031f8 <UART_SetConfig+0x2f4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	69f9      	ldr	r1, [r7, #28]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f023 010f 	bic.w	r1, r3, #15
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a97      	ldr	r2, [pc, #604]	; (80031fc <UART_SetConfig+0x2f8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d120      	bne.n	8002fe6 <UART_SetConfig+0xe2>
 8002fa4:	4b96      	ldr	r3, [pc, #600]	; (8003200 <UART_SetConfig+0x2fc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d816      	bhi.n	8002fe0 <UART_SetConfig+0xdc>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0xb4>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fcf 	.word	0x08002fcf
 8002fc4:	08002fdb 	.word	0x08002fdb
 8002fc8:	2301      	movs	r3, #1
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e0e7      	b.n	800319e <UART_SetConfig+0x29a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e0e4      	b.n	800319e <UART_SetConfig+0x29a>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	76fb      	strb	r3, [r7, #27]
 8002fd8:	e0e1      	b.n	800319e <UART_SetConfig+0x29a>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	76fb      	strb	r3, [r7, #27]
 8002fde:	e0de      	b.n	800319e <UART_SetConfig+0x29a>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	76fb      	strb	r3, [r7, #27]
 8002fe4:	e0db      	b.n	800319e <UART_SetConfig+0x29a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a86      	ldr	r2, [pc, #536]	; (8003204 <UART_SetConfig+0x300>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d132      	bne.n	8003056 <UART_SetConfig+0x152>
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <UART_SetConfig+0x2fc>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d828      	bhi.n	8003050 <UART_SetConfig+0x14c>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0x100>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	08003051 	.word	0x08003051
 800300c:	08003051 	.word	0x08003051
 8003010:	08003051 	.word	0x08003051
 8003014:	08003045 	.word	0x08003045
 8003018:	08003051 	.word	0x08003051
 800301c:	08003051 	.word	0x08003051
 8003020:	08003051 	.word	0x08003051
 8003024:	0800303f 	.word	0x0800303f
 8003028:	08003051 	.word	0x08003051
 800302c:	08003051 	.word	0x08003051
 8003030:	08003051 	.word	0x08003051
 8003034:	0800304b 	.word	0x0800304b
 8003038:	2300      	movs	r3, #0
 800303a:	76fb      	strb	r3, [r7, #27]
 800303c:	e0af      	b.n	800319e <UART_SetConfig+0x29a>
 800303e:	2302      	movs	r3, #2
 8003040:	76fb      	strb	r3, [r7, #27]
 8003042:	e0ac      	b.n	800319e <UART_SetConfig+0x29a>
 8003044:	2304      	movs	r3, #4
 8003046:	76fb      	strb	r3, [r7, #27]
 8003048:	e0a9      	b.n	800319e <UART_SetConfig+0x29a>
 800304a:	2308      	movs	r3, #8
 800304c:	76fb      	strb	r3, [r7, #27]
 800304e:	e0a6      	b.n	800319e <UART_SetConfig+0x29a>
 8003050:	2310      	movs	r3, #16
 8003052:	76fb      	strb	r3, [r7, #27]
 8003054:	e0a3      	b.n	800319e <UART_SetConfig+0x29a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6b      	ldr	r2, [pc, #428]	; (8003208 <UART_SetConfig+0x304>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d120      	bne.n	80030a2 <UART_SetConfig+0x19e>
 8003060:	4b67      	ldr	r3, [pc, #412]	; (8003200 <UART_SetConfig+0x2fc>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d013      	beq.n	8003096 <UART_SetConfig+0x192>
 800306e:	2b30      	cmp	r3, #48	; 0x30
 8003070:	d814      	bhi.n	800309c <UART_SetConfig+0x198>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d009      	beq.n	800308a <UART_SetConfig+0x186>
 8003076:	2b20      	cmp	r3, #32
 8003078:	d810      	bhi.n	800309c <UART_SetConfig+0x198>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0x180>
 800307e:	2b10      	cmp	r3, #16
 8003080:	d006      	beq.n	8003090 <UART_SetConfig+0x18c>
 8003082:	e00b      	b.n	800309c <UART_SetConfig+0x198>
 8003084:	2300      	movs	r3, #0
 8003086:	76fb      	strb	r3, [r7, #27]
 8003088:	e089      	b.n	800319e <UART_SetConfig+0x29a>
 800308a:	2302      	movs	r3, #2
 800308c:	76fb      	strb	r3, [r7, #27]
 800308e:	e086      	b.n	800319e <UART_SetConfig+0x29a>
 8003090:	2304      	movs	r3, #4
 8003092:	76fb      	strb	r3, [r7, #27]
 8003094:	e083      	b.n	800319e <UART_SetConfig+0x29a>
 8003096:	2308      	movs	r3, #8
 8003098:	76fb      	strb	r3, [r7, #27]
 800309a:	e080      	b.n	800319e <UART_SetConfig+0x29a>
 800309c:	2310      	movs	r3, #16
 800309e:	76fb      	strb	r3, [r7, #27]
 80030a0:	e07d      	b.n	800319e <UART_SetConfig+0x29a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a59      	ldr	r2, [pc, #356]	; (800320c <UART_SetConfig+0x308>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d120      	bne.n	80030ee <UART_SetConfig+0x1ea>
 80030ac:	4b54      	ldr	r3, [pc, #336]	; (8003200 <UART_SetConfig+0x2fc>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030b6:	2bc0      	cmp	r3, #192	; 0xc0
 80030b8:	d013      	beq.n	80030e2 <UART_SetConfig+0x1de>
 80030ba:	2bc0      	cmp	r3, #192	; 0xc0
 80030bc:	d814      	bhi.n	80030e8 <UART_SetConfig+0x1e4>
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x1d2>
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d810      	bhi.n	80030e8 <UART_SetConfig+0x1e4>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x1cc>
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d006      	beq.n	80030dc <UART_SetConfig+0x1d8>
 80030ce:	e00b      	b.n	80030e8 <UART_SetConfig+0x1e4>
 80030d0:	2300      	movs	r3, #0
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e063      	b.n	800319e <UART_SetConfig+0x29a>
 80030d6:	2302      	movs	r3, #2
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e060      	b.n	800319e <UART_SetConfig+0x29a>
 80030dc:	2304      	movs	r3, #4
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e05d      	b.n	800319e <UART_SetConfig+0x29a>
 80030e2:	2308      	movs	r3, #8
 80030e4:	76fb      	strb	r3, [r7, #27]
 80030e6:	e05a      	b.n	800319e <UART_SetConfig+0x29a>
 80030e8:	2310      	movs	r3, #16
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e057      	b.n	800319e <UART_SetConfig+0x29a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a47      	ldr	r2, [pc, #284]	; (8003210 <UART_SetConfig+0x30c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d125      	bne.n	8003144 <UART_SetConfig+0x240>
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <UART_SetConfig+0x2fc>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003106:	d017      	beq.n	8003138 <UART_SetConfig+0x234>
 8003108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310c:	d817      	bhi.n	800313e <UART_SetConfig+0x23a>
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d00b      	beq.n	800312c <UART_SetConfig+0x228>
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d811      	bhi.n	800313e <UART_SetConfig+0x23a>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <UART_SetConfig+0x222>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d006      	beq.n	8003132 <UART_SetConfig+0x22e>
 8003124:	e00b      	b.n	800313e <UART_SetConfig+0x23a>
 8003126:	2300      	movs	r3, #0
 8003128:	76fb      	strb	r3, [r7, #27]
 800312a:	e038      	b.n	800319e <UART_SetConfig+0x29a>
 800312c:	2302      	movs	r3, #2
 800312e:	76fb      	strb	r3, [r7, #27]
 8003130:	e035      	b.n	800319e <UART_SetConfig+0x29a>
 8003132:	2304      	movs	r3, #4
 8003134:	76fb      	strb	r3, [r7, #27]
 8003136:	e032      	b.n	800319e <UART_SetConfig+0x29a>
 8003138:	2308      	movs	r3, #8
 800313a:	76fb      	strb	r3, [r7, #27]
 800313c:	e02f      	b.n	800319e <UART_SetConfig+0x29a>
 800313e:	2310      	movs	r3, #16
 8003140:	76fb      	strb	r3, [r7, #27]
 8003142:	e02c      	b.n	800319e <UART_SetConfig+0x29a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <UART_SetConfig+0x2f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d125      	bne.n	800319a <UART_SetConfig+0x296>
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <UART_SetConfig+0x2fc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315c:	d017      	beq.n	800318e <UART_SetConfig+0x28a>
 800315e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003162:	d817      	bhi.n	8003194 <UART_SetConfig+0x290>
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d00b      	beq.n	8003182 <UART_SetConfig+0x27e>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d811      	bhi.n	8003194 <UART_SetConfig+0x290>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <UART_SetConfig+0x278>
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d006      	beq.n	8003188 <UART_SetConfig+0x284>
 800317a:	e00b      	b.n	8003194 <UART_SetConfig+0x290>
 800317c:	2300      	movs	r3, #0
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	e00d      	b.n	800319e <UART_SetConfig+0x29a>
 8003182:	2302      	movs	r3, #2
 8003184:	76fb      	strb	r3, [r7, #27]
 8003186:	e00a      	b.n	800319e <UART_SetConfig+0x29a>
 8003188:	2304      	movs	r3, #4
 800318a:	76fb      	strb	r3, [r7, #27]
 800318c:	e007      	b.n	800319e <UART_SetConfig+0x29a>
 800318e:	2308      	movs	r3, #8
 8003190:	76fb      	strb	r3, [r7, #27]
 8003192:	e004      	b.n	800319e <UART_SetConfig+0x29a>
 8003194:	2310      	movs	r3, #16
 8003196:	76fb      	strb	r3, [r7, #27]
 8003198:	e001      	b.n	800319e <UART_SetConfig+0x29a>
 800319a:	2310      	movs	r3, #16
 800319c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <UART_SetConfig+0x2f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 809f 	bne.w	80032e8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031aa:	7efb      	ldrb	r3, [r7, #27]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d837      	bhi.n	8003220 <UART_SetConfig+0x31c>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <UART_SetConfig+0x2b4>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031dd 	.word	0x080031dd
 80031bc:	08003221 	.word	0x08003221
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	08003221 	.word	0x08003221
 80031c8:	080031eb 	.word	0x080031eb
 80031cc:	08003221 	.word	0x08003221
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003221 	.word	0x08003221
 80031d8:	08003219 	.word	0x08003219
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7fe ffa4 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80031e0:	6178      	str	r0, [r7, #20]
        break;
 80031e2:	e022      	b.n	800322a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <UART_SetConfig+0x310>)
 80031e6:	617b      	str	r3, [r7, #20]
        break;
 80031e8:	e01f      	b.n	800322a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7fe ff05 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 80031ee:	6178      	str	r0, [r7, #20]
        break;
 80031f0:	e01b      	b.n	800322a <UART_SetConfig+0x326>
 80031f2:	bf00      	nop
 80031f4:	cfff69f3 	.word	0xcfff69f3
 80031f8:	40008000 	.word	0x40008000
 80031fc:	40013800 	.word	0x40013800
 8003200:	40021000 	.word	0x40021000
 8003204:	40004400 	.word	0x40004400
 8003208:	40004800 	.word	0x40004800
 800320c:	40004c00 	.word	0x40004c00
 8003210:	40005000 	.word	0x40005000
 8003214:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321c:	617b      	str	r3, [r7, #20]
        break;
 800321e:	e004      	b.n	800322a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	76bb      	strb	r3, [r7, #26]
        break;
 8003228:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8119 	beq.w	8003464 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	4a95      	ldr	r2, [pc, #596]	; (800348c <UART_SetConfig+0x588>)
 8003238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800323c:	461a      	mov	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fbb3 f3f2 	udiv	r3, r3, r2
 8003244:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d305      	bcc.n	8003262 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d902      	bls.n	8003268 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	76bb      	strb	r3, [r7, #26]
 8003266:	e0fd      	b.n	8003464 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4618      	mov	r0, r3
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	4a85      	ldr	r2, [pc, #532]	; (800348c <UART_SetConfig+0x588>)
 8003276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800327a:	b29a      	uxth	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f7fc ffbc 	bl	80001fc <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	020b      	lsls	r3, r1, #8
 8003296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800329a:	0202      	lsls	r2, r0, #8
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6849      	ldr	r1, [r1, #4]
 80032a0:	0849      	lsrs	r1, r1, #1
 80032a2:	4608      	mov	r0, r1
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	1814      	adds	r4, r2, r0
 80032aa:	eb43 0501 	adc.w	r5, r3, r1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ff9e 	bl	80001fc <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4613      	mov	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ce:	d308      	bcc.n	80032e2 <UART_SetConfig+0x3de>
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d6:	d204      	bcs.n	80032e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e0c0      	b.n	8003464 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	76bb      	strb	r3, [r7, #26]
 80032e6:	e0bd      	b.n	8003464 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d164      	bne.n	80033bc <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80032f2:	7efb      	ldrb	r3, [r7, #27]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d828      	bhi.n	800334a <UART_SetConfig+0x446>
 80032f8:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0x3fc>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003325 	.word	0x08003325
 8003304:	0800332d 	.word	0x0800332d
 8003308:	08003335 	.word	0x08003335
 800330c:	0800334b 	.word	0x0800334b
 8003310:	0800333b 	.word	0x0800333b
 8003314:	0800334b 	.word	0x0800334b
 8003318:	0800334b 	.word	0x0800334b
 800331c:	0800334b 	.word	0x0800334b
 8003320:	08003343 	.word	0x08003343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe ff00 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003328:	6178      	str	r0, [r7, #20]
        break;
 800332a:	e013      	b.n	8003354 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7fe ff12 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003330:	6178      	str	r0, [r7, #20]
        break;
 8003332:	e00f      	b.n	8003354 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003334:	4b56      	ldr	r3, [pc, #344]	; (8003490 <UART_SetConfig+0x58c>)
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e00c      	b.n	8003354 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333a:	f7fe fe5d 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800333e:	6178      	str	r0, [r7, #20]
        break;
 8003340:	e008      	b.n	8003354 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003346:	617b      	str	r3, [r7, #20]
        break;
 8003348:	e004      	b.n	8003354 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	76bb      	strb	r3, [r7, #26]
        break;
 8003352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8084 	beq.w	8003464 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <UART_SetConfig+0x588>)
 8003362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003366:	461a      	mov	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fbb3 f3f2 	udiv	r3, r3, r2
 800336e:	005a      	lsls	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	441a      	add	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d916      	bls.n	80033b6 <UART_SetConfig+0x4b2>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d212      	bcs.n	80033b6 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	89fa      	ldrh	r2, [r7, #14]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e056      	b.n	8003464 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	76bb      	strb	r3, [r7, #26]
 80033ba:	e053      	b.n	8003464 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033bc:	7efb      	ldrb	r3, [r7, #27]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d827      	bhi.n	8003412 <UART_SetConfig+0x50e>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0x4c4>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033fd 	.word	0x080033fd
 80033d4:	08003413 	.word	0x08003413
 80033d8:	08003403 	.word	0x08003403
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003413 	.word	0x08003413
 80033e4:	08003413 	.word	0x08003413
 80033e8:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7fe fe9c 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80033f0:	6178      	str	r0, [r7, #20]
        break;
 80033f2:	e013      	b.n	800341c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7fe feae 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 80033f8:	6178      	str	r0, [r7, #20]
        break;
 80033fa:	e00f      	b.n	800341c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <UART_SetConfig+0x58c>)
 80033fe:	617b      	str	r3, [r7, #20]
        break;
 8003400:	e00c      	b.n	800341c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe fdf9 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003406:	6178      	str	r0, [r7, #20]
        break;
 8003408:	e008      	b.n	800341c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	617b      	str	r3, [r7, #20]
        break;
 8003410:	e004      	b.n	800341c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	76bb      	strb	r3, [r7, #26]
        break;
 800341a:	bf00      	nop
    }

    if (pclk != 0U)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	4a19      	ldr	r2, [pc, #100]	; (800348c <UART_SetConfig+0x588>)
 8003428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342c:	461a      	mov	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fbb3 f2f2 	udiv	r2, r3, r2
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b0f      	cmp	r3, #15
 800344a:	d909      	bls.n	8003460 <UART_SetConfig+0x55c>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003452:	d205      	bcs.n	8003460 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e001      	b.n	8003464 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003480:	7ebb      	ldrb	r3, [r7, #26]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bdb0      	pop	{r4, r5, r7, pc}
 800348a:	bf00      	nop
 800348c:	08003abc 	.word	0x08003abc
 8003490:	00f42400 	.word	0x00f42400

08003494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01a      	beq.n	80035aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003592:	d10a      	bne.n	80035aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e8:	f7fd fc08 	bl	8000dfc <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d10e      	bne.n	800361a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f82f 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e025      	b.n	8003666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d10e      	bne.n	8003646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f819 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b09c      	sub	sp, #112	; 0x70
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	e0a9      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003686:	f000 80a5 	beq.w	80037d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fd fbb7 	bl	8000dfc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800369a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369c:	2b00      	cmp	r3, #0
 800369e:	d140      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	663b      	str	r3, [r7, #96]	; 0x60
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e069      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d051      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373e:	d149      	bne.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003748:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800375e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
 800376a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800376e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	613b      	str	r3, [r7, #16]
   return(result);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	66bb      	str	r3, [r7, #104]	; 0x68
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800379c:	623a      	str	r2, [r7, #32]
 800379e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	69f9      	ldr	r1, [r7, #28]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e010      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f43f af46 	beq.w	8003680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3770      	adds	r7, #112	; 0x70
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UARTEx_DisableFifoMode+0x16>
 8003810:	2302      	movs	r3, #2
 8003812:	e027      	b.n	8003864 <HAL_UARTEx_DisableFifoMode+0x66>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	; 0x24
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003842:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003884:	2302      	movs	r3, #2
 8003886:	e02d      	b.n	80038e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f84f 	bl	8003968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e02d      	b.n	8003960 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f811 	bl	8003968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003988:	e031      	b.n	80039ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800398a:	2308      	movs	r3, #8
 800398c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800398e:	2308      	movs	r3, #8
 8003990:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	0e5b      	lsrs	r3, r3, #25
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	0f5b      	lsrs	r3, r3, #29
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039b2:	7bbb      	ldrb	r3, [r7, #14]
 80039b4:	7b3a      	ldrb	r2, [r7, #12]
 80039b6:	4911      	ldr	r1, [pc, #68]	; (80039fc <UARTEx_SetNbDataToProcess+0x94>)
 80039b8:	5c8a      	ldrb	r2, [r1, r2]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039be:	7b3a      	ldrb	r2, [r7, #12]
 80039c0:	490f      	ldr	r1, [pc, #60]	; (8003a00 <UARTEx_SetNbDataToProcess+0x98>)
 80039c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	7b7a      	ldrb	r2, [r7, #13]
 80039d4:	4909      	ldr	r1, [pc, #36]	; (80039fc <UARTEx_SetNbDataToProcess+0x94>)
 80039d6:	5c8a      	ldrb	r2, [r1, r2]
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039dc:	7b7a      	ldrb	r2, [r7, #13]
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <UARTEx_SetNbDataToProcess+0x98>)
 80039e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	08003ad4 	.word	0x08003ad4
 8003a00:	08003adc 	.word	0x08003adc

08003a04 <__libc_init_array>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4d0d      	ldr	r5, [pc, #52]	; (8003a3c <__libc_init_array+0x38>)
 8003a08:	4c0d      	ldr	r4, [pc, #52]	; (8003a40 <__libc_init_array+0x3c>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	2600      	movs	r6, #0
 8003a10:	42a6      	cmp	r6, r4
 8003a12:	d109      	bne.n	8003a28 <__libc_init_array+0x24>
 8003a14:	4d0b      	ldr	r5, [pc, #44]	; (8003a44 <__libc_init_array+0x40>)
 8003a16:	4c0c      	ldr	r4, [pc, #48]	; (8003a48 <__libc_init_array+0x44>)
 8003a18:	f000 f820 	bl	8003a5c <_init>
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	2600      	movs	r6, #0
 8003a22:	42a6      	cmp	r6, r4
 8003a24:	d105      	bne.n	8003a32 <__libc_init_array+0x2e>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2c:	4798      	blx	r3
 8003a2e:	3601      	adds	r6, #1
 8003a30:	e7ee      	b.n	8003a10 <__libc_init_array+0xc>
 8003a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a36:	4798      	blx	r3
 8003a38:	3601      	adds	r6, #1
 8003a3a:	e7f2      	b.n	8003a22 <__libc_init_array+0x1e>
 8003a3c:	08003aec 	.word	0x08003aec
 8003a40:	08003aec 	.word	0x08003aec
 8003a44:	08003aec 	.word	0x08003aec
 8003a48:	08003af0 	.word	0x08003af0

08003a4c <memset>:
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <_init>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr

08003a68 <_fini>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr
